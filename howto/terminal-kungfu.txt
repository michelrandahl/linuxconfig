# cat file without having to type the whole filename
`$ cat *bar*`

# remove first line of file
`$ tail -n +2 my-file`

# create unique list
`$ cat myfile | sort | uniq`

# compare two sorted files
`$ comm file1 file2`

# sort and compare two files and supress diff for common lines and for the second file
`$ comm <(sort foo.txt) <(sort foo2.txt) -23`

# extract column 1,2,3 data from csv file
`$ tail -n +2 my-file | cut -d ',' -f 1,2,3`

# find first three files with specific file-type under current directory
`$ find . -name "*.json" -type f | head -3`

# find specific files and grep inside them
`$ find . -name project.clj | xargs grep 'lein-nvd'`

# grep disjunction (`-E` is for extended regex)
`$ grep -E 'foo|bar' <some-file>`

# advanced uses of find...
# find all directories that have Makefile and list their subdirectories
`$ find . -mindepth 2 -name Makefile -exec bash -c 'find $(dirname $0) -type d' {} \;`
# rename inside files with find
`$ find . -name Makefile -exec sh -c 'sed -i "s|temp/|cicd/|" {}' \;`

# find files and cat them together with a newline at the end of each file
`$ find . -name status | xargs -I{} bash -c "cat {}; echo ''"`

# search for a class file in a lot of jar files (grep works on content of jar files)
`$ find . -name '*.jar' -exec grep -Hsli ClientConfiguration {} \;`

# find directories that contain a specific file and execute a program on the directory
# example with invoking `lein nvd check` on all directories that contain project.clj files
`$ find . -name project.clj -execdir lein nvd check {} ";"`

# find excluding specific directory
`$ find -name "*.js" -not -path "./node_modules/*"`

# retain colour output in `less` (note that you can also press `-r` when already in less output)
# example with `tree`
`$ tree -C -L 2 | less -r`
# example with `ls`
`$ ls -lrth --color | less -r`
# example with `jq`
`$ nix search yq --json | jq -C . | less -r`

# write to file inside unix pipeline
`$ .... | tee my-file.txt | ...`

# extract three entries from second column from csv-file with delimiter ';' using `cut`
`$ cat file.csv | cut -d ';' -f2 | tail -n +2 | head -3`

# show exit status of the last executed terminal command
`$ echo $?`

# 'grep' with a regex pattern inside lines using `sed`
`$ cat /home/michel/.aws-credentials | sed -n 's|^aws.* = \(.*\)$|\1|p'`

# grep recursive and exclude directory
`$ grep -R --exclude-dir=node_modules OldOverageProductId .`

# list hidden files only
`$ ls -d .*`

# grep inside a line
`$ grep -o "=null"`

# inverse the returned `status code` returned by grep (the `!` inverses the status code)
`$ echo $stuff | (! grep -oE "[^ ]+=null|[^ ]+= |[^ ]+=$" )`
