# list git configuration details (both global and for current repository)
`$ git config -l`

# list non merged branches
`$ git branch --no-merged`

# filter commit logs by author
`$ git log -p --author="michel nielsen"`

# show only file names in git log
`$ git log --name-only`

# show only file names in git log, compact version
`$ git log --name-only --oneline`

# list untracked files to remove
`$ git clean -n`

# remove untracked files and directories
`$ git clean -f -d`

# get rid of local commit, but keep the changes from the commit
`$ git reset HEAD~1`

# hard reset to head of branch
`$ git reset --hard ORIG_HEAD`

# get rid of latest local commit
`$ git reset --hard HEAD~1`

# get rid of all local changes and reset to HEAD of remote branch
`$ git reset --hard origing/develop`

# find first commit on some branch which was based on master
`$ git log master.. | tail -n 10`

# squash commits
`$ git rebase -i origin/master`
...
`$ git push --force-with-lease`

# squash commits
`$ git rebase -i HEAD~5`

# view commits only on branch which was based on master
`$ git log --no-merges master..`

# git blame with no filename
`$ git blame -c <filename>`

# list all branches with author name (in json so it can be parsed by jq)
`$ git for-each-ref --format='{"author_name": "%(authorname)", "authordate": "%(authordate)", "refname": "%(refname)"}' --sort=authordate`

# save password
`$ git config credential.helper store`

# diff between current branch and master
`$ git diff master --`

# diff specific file between branches
`$ git diff mybranch..master -- myfile.cs`

# Update downloaded repository to use ssh.
# First check what urls currently are used
`$ git remote -v`
# Next change the origin to the ssh url
`$ git remote set-url origin git@github.com:michelrandahl/linuxconfig.git`

# view staged diff
`$ git diff --staged`

# list commits on which have not yet been merged to another branch
`$ git log --no-merges release/5.0.0 ^develop`

# list commits from current branch that differ from other branch
`$ git log --no-merges HEAD ^develop`

# check if commit X is in the history log of commit Y
`$ git log Y --pretty=format:"%H" | grep X`

# checkout file from another branch
`$ git checkout other-branch -- my-file`

# list files that have changed on branch
`$ git diff --name-only $(git merge-base HEAD origin/develop)`

# filter git history for a specific subfolder on a specific branch
`$ git filter-branch --prune-empty --subdirectory-filter deployable-b/ develop`
# ... OR with git filter-repo
`$ git filter-repo --subdirectory-filter deployable-b/ --refs develop`

# list remotes
`$ git remote -v`

# ignore specific file types in git diff
`$ git diff '!*.html'`

# show all whitespace in a diff
`$ git diff --ws-error-highlight=all <file>`

# disable annoying GUI credential prompt and use terminal prompt instead
`$ git config --global core.askPass ""`
